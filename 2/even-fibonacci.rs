// Each new term in the Fibonacci sequence is generated by adding the previous two
// terms. By starting with 1 and 2, the first 10 terms will be:
//      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

fn even_fib_sum (boundary: i32) -> i32 {
    let mut sum: i32 = 0;
    let mut last1: i32 = 0;
    let mut last2: i32 = 0;
    let mut current: i32;

    // Let's do Fibonacci.
    loop {
        current = last1 + last2;

        // Initialize first number
        if current == 0 {
            current = 1;
        }

        // Enforce limit
        if current > boundary {
            break;
        }

        // Track sum
        if current % 2 == 0 {
            sum += current;
        }

        last2 = last1;
        last1 = current;
    }

    return sum;
}

fn main () {
    println!("Even-valued Fibonacci terms <= four million to sum:\n{}", even_fib_sum(4000000))
}
